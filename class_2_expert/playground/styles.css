* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


/**
stacking context demo

    // The containing block which using this class must have a z-index
    // this is important because it defies the stacking context where lives child-1,2 on the z axis
    // setting z-index -1 on children and parent to 1 will not push the elms behind the parent
    // although the content in the parent will will be on top of the before element which will result in background
    // being bellow the content that doesn't have a defined background like for example a <p> will show its text
    // on top of ::before
 */
.parent-test{
    position: relative;
    width: 25rem;
    height: 25rem;
    background: gold;
    z-index: 1;
    color: white;


}

.parent-test-2{
    /*position: relative;*/
    width: 50%;
    background: blueviolet;
    /*top: 0;*/
    margin: 3rem;
    height: 50vh;
    /*clip-path: polygon(0 0 , 100% 0, 90% 50%, 80% 100%, 0 100%);*/

    /*clip-path: polygon(0 0 , 100% 0, 100% 50%, 100% 100%, 0 100%);*/
    transition: clip-path 1s linear;


}

.parent-test-2::before{
    content: '';
    display: block;
    position: relative;
    top:5rem;
    width: 35%;
    height: 35%;
    background: #1cf1cf;
    z-index: 1;
}

/*.parent-test-2:hover{*/
/*    !*clip-path: polygon(20% 0, 100% 0, 100% 100%, 0 100%, 10% 50%);*!*/
/*}*/

.child-4{

    background: #2ddf5c;
    width: 75%;
    height: 50%;
    margin: 1rem;
    position: relative;
    z-index: 0;
}

.child-1{
    width: 50%;
    height: 50%;
    background: black;
    /*z-index: 0;*/

}

.sub-child-1{


    top: 0;
    position: absolute;
    left:0;
    width: 100%;
    height: 50%;
    background: #521751;
    z-index: 1;
}

.child-2{
    width: 50%;
    height: 50%;
    background: red;
    /*z-index: 0;*/
    z-index: 1;
    position: absolute;
    top: 0;
}

.parent-test-3{
    height: 25rem;
    width: 50%;
    background: blue;
    position: relative;
}



/**
absolute positioned element centred with margin auto using defined top,bottom,left,right
 */
.child-3{

    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    width: 50%;
    height: 50%;
    background: orangered;
    position: absolute;
    margin: auto;

}

.child-5{

    max-width: 100%;
    max-height: 100%;

}


/**
  About responsive flex images using the padding-bottom or top and aspect ratio trick
  This method allows to position images with different sizes in flex box context.
  The following is some step to achieve this.

  1. Create a picture wrapper element with position relative and place it inside a flex item if flex is used
  2. Place the image tag inside the wrapper and give it a position of absolute
  3. calculate the aspect ration of the image with lowest height (dividing the height by the width)
  4. the result will be applied to padding-bottom or top in %
  5. padding will act as content and when used as % value it becomes proportional to the width.
     For example if the wrapper width = 500px using padding-bottom = 100% will give the wrapper 500px of height
  6. The previous step will allow the wrapper to have a height even if it's img child is positioned absolute
     The width of the wrapper is defined by the child image width, therefore using padding-bottom with %
     will be proportional to the width of the wrapper

  7. To make all the images the same size we use overflow hidden and center with top 50% and translateY(-50%)
     on the image wrapper. This will make all the images be strictly sized equal to the smallest image.
     overflow:hidden will hide the overflow of the larger images and center them in the wrapper. We can also think of
     the wrapper as a frame. This method will also work if the images have the same size the difference is that
     the images will have equal aspect ratio therefore they will perfectly fit inside the wrapper without overflowing.
*/

.img-flex-cont{
    display: flex;
    flex-wrap: wrap;
    max-width: 1024px;
    margin: 0 auto;
}

.box{
    color: #fff;
    font-size: 48px;
    margin: 5px;
    flex:  1 1 calc(25% - 10px);

}

.img-wrapper{
    overflow: hidden;
    padding-bottom: 60%;
    position: relative;
}

.box img{
    width: 100%;
    position: absolute;
    bottom:50%;
    transform: translateY(50%);
}
